<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        <stringProp name="CookieManager.policy">default</stringProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="queue_configurations" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="queue_host" elementType="Argument">
            <stringProp name="Argument.name">queue_host</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="queue_port" elementType="Argument">
            <stringProp name="Argument.name">queue_port</stringProp>
            <stringProp name="Argument.value">8089</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay_time" elementType="Argument">
            <stringProp name="Argument.name">delay_time</stringProp>
            <stringProp name="Argument.value">120000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="check_number" elementType="Argument">
            <stringProp name="Argument.name">check_number</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables general" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="filePath" elementType="Argument">
            <stringProp name="Argument.name">filePath</stringProp>
            <stringProp name="Argument.value">/deleteList/UC02_filepath.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="toServList_package" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511170052000</longProp>
        <longProp name="ThreadGroup.end_time">1511170052000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="user" enabled="true">
          <stringProp name="delimiter">\t</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">./deleteList/UC02_user.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">user,pass,userid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="filePath" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;
vars.put(&quot;testPlanFileDir&quot;, FileServer.getFileServer().getBaseDir().replaceAll(&quot;\\\\&quot;, &quot;/&quot;));
String pathToUserFile = vars.get(&quot;testPlanFileDir&quot;)+vars.get(&quot;filePath&quot;); 
//log.info(&quot;INFO________________________&quot;+ pathToUserFile);
ArrayList&lt;String&gt; pathList = readList(pathToUserFile)
vars.putObject(&quot;pathList&quot;, pathList)


//-----functions-----//
public &lt;T&gt; List&lt;T&gt; readList(String fileName) {
	ArrayList currList = new ArrayList();
	new File(fileName).withReader(&apos;UTF-8&apos;) { reader -&gt;
	 	def line
	 	while ((line = reader.readLine()) != null) if(isValueFound(line)) {
	 		line=line.replaceAll(&quot;\&quot;&quot;,&quot;&quot;);
	 		currList.add(line);};    
	}	
	return currList;
}

public boolean isValueFound(String varValue) {
	return (varValue != null) &amp;&amp; (!varValue.isEmpty()) &amp;&amp; (!&quot;NOTFOUND&quot;.equals(varValue)) &amp;&amp; (varValue.length() &gt; 0);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="UC00_01_Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev.cdl.alrosa.ru/login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">dev.cdl.alrosa.ru</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name=":method" elementType="Header">
                  <stringProp name="Header.name">:method</stringProp>
                  <stringProp name="Header.value">GET</stringProp>
                </elementProp>
                <elementProp name=":authority" elementType="Header">
                  <stringProp name="Header.name">:authority</stringProp>
                  <stringProp name="Header.value">dev.cdl.alrosa.ru</stringProp>
                </elementProp>
                <elementProp name=":scheme" elementType="Header">
                  <stringProp name="Header.name">:scheme</stringProp>
                  <stringProp name="Header.value">https</stringProp>
                </elementProp>
                <elementProp name=":path" elementType="Header">
                  <stringProp name="Header.name">:path</stringProp>
                  <stringProp name="Header.value">/login</stringProp>
                </elementProp>
                <elementProp name="cache-control" elementType="Header">
                  <stringProp name="Header.name">cache-control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;98&quot;, &quot;Microsoft Edge&quot;;v=&quot;98&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="upgrade-insecure-requests" elementType="Header">
                  <stringProp name="Header.name">upgrade-insecure-requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">user-agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 Edg/98.0.1108.62</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-user" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-user</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">accept-language</stringProp>
                  <stringProp name="Header.value">ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">cookie</stringProp>
                  <stringProp name="Header.value">_ym_d=1657808017; _ym_uid=1657808017938105760</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://keycloak-dev.alrosa.ru/auth/realms/cdl-int/protocol/openid-connect/token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${pass}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">cadas-dl</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${user}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">keycloak-dev.alrosa.ru</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">auth/realms/cdl-int/protocol/openid-connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">keycloak-dev.alrosa.ru</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Content-Length" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">83</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;98&quot;, &quot;Microsoft Edge&quot;;v=&quot;98&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 Edg/98.0.1108.62</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://dev.cdl.alrosa.ru</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://dev.cdl.alrosa.ru/</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">access_token</stringProp>
              <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__jexl3(&quot;${doc_id}&quot; != &quot;&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="doc_id" enabled="true">
            <stringProp name="delimiter">;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">toServList.csv</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames">docPath,filePath</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="doc_id" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String s = vars.get(&quot;doc_id&quot;);
String[] parts = s.split(&quot;;&quot;);
log.info(&quot;INFO____________---__&quot; +  parts)	
Integer currlineNum  = Integer.valueOf(parts[0])-1;
String currFileName  = parts[1];

ArrayList pathList = ((ArrayList)vars.getObject(&quot;pathList&quot;));
String tPath = pathList.get(currlineNum);
String[] parts2 = tPath.split(&quot;\t&quot;);
log.info(&quot;INFO____________-----------__&quot; +  tPath)	
vars.put(&quot;currPath&quot;,parts2[0]);
vars.put(&quot;readblePath&quot;,parts2[1]);
vars.put(&quot;currFile&quot;,currFileName);

log.info(&quot;INFO_________________&quot; +  vars.get(&quot;currPath&quot;))
log.info(&quot;INFO_________________&quot; +  vars.get(&quot;readblePath&quot;))		
log.info(&quot;INFO_________________&quot; +  vars.get(&quot;currFile&quot;))	







//-------------------functions--------------------

public String listPoll(String AFParam) {	
	StringBuffer sb = new StringBuffer();
	sb.append(&quot;http://&quot;);
	sb.append(vars.get(&quot;queue_host&quot;));
	sb.append(&quot;:&quot;);
	sb.append(vars.get(&quot;queue_port&quot;));
	sb.append(&quot;/listpoll?param=&quot;);
	sb.append(AFParam);
	def get = new URL(sb.toString()).openConnection();
	
	def getRC = get.getResponseCode();
	if(getRC.equals(200)) {
		return get.getInputStream().getText();
	}
	return null;
}


/*унифицированный запрос listoffer к очереди*/  
public boolean toQueue(String AFQueue, String AFValue) {
	if(isValueFound(AFQueue) &amp;&amp; isValueFound(AFValue)){		
		StringBuffer sb = new StringBuffer();
		sb.append(&quot;http://&quot;);
		sb.append(vars.get(&quot;queue_host&quot;));
		sb.append(&quot;:&quot;);
		sb.append(vars.get(&quot;queue_port&quot;));
		sb.append(&quot;/listoffer?param=&quot;);
		sb.append(AFQueue);
		sb.append(&quot;&amp;value=&quot;);
		sb.append(AFValue);
		def get = new URL(sb.toString()).openConnection();
		//log.info(&quot;INFO__________sb.toString()______________&quot;+ sb.toString())
		def getRC = get.getResponseCode();
		return true;
	}
	return false;
}

/*проверка входящей строки*/
public boolean isValueFound(String varValue) {
	return (varValue != null) &amp;&amp; (!varValue.isEmpty()) &amp;&amp; (!&quot;NOTFOUND&quot;.equals(varValue)) &amp;&amp; (varValue.length() &gt; 0);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="false">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="UC00_01_deleteDoc" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev.cdl.alrosa.ru/api/document-manager/files?path=%D0%94%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B%20%D0%BD%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%86%D0%B8%D1%8E%2Fnttest_06092022102336_1%2Ftest.txt" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="path" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">path</stringProp>
                    <stringProp name="Argument.value">${currPath}${currFile}%2Ftest.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">dev.cdl.alrosa.ru</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/document-manager/files</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.md5">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name=":method" elementType="Header">
                    <stringProp name="Header.name">:method</stringProp>
                    <stringProp name="Header.value">GET</stringProp>
                  </elementProp>
                  <elementProp name=":authority" elementType="Header">
                    <stringProp name="Header.name">:authority</stringProp>
                    <stringProp name="Header.value">dev.cdl.alrosa.ru</stringProp>
                  </elementProp>
                  <elementProp name=":scheme" elementType="Header">
                    <stringProp name="Header.name">:scheme</stringProp>
                    <stringProp name="Header.value">https</stringProp>
                  </elementProp>
                  <elementProp name=":path" elementType="Header">
                    <stringProp name="Header.name">:path</stringProp>
                    <stringProp name="Header.value">/api/document-manager/files?path=%D0%94%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B%20%D0%BD%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%86%D0%B8%D1%8E%2Fnttest_06092022102336_1%2Ftest.txt</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="user-agent" elementType="Header">
                    <stringProp name="Header.name">user-agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.86 YaBrowser/21.3.0.673 Yowser/2.5 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="sec-fetch-site" elementType="Header">
                    <stringProp name="Header.name">sec-fetch-site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="sec-fetch-mode" elementType="Header">
                    <stringProp name="Header.name">sec-fetch-mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="sec-fetch-dest" elementType="Header">
                    <stringProp name="Header.name">sec-fetch-dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="referer" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://dev.cdl.alrosa.ru/documents/folder/%D0%94%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B%20%D0%BD%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%86%D0%B8%D1%8E%2F/document/%D0%94%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B%20%D0%BD%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%86%D0%B8%D1%8E%2Fnttest_06092022102336_1%2F</stringProp>
                  </elementProp>
                  <elementProp name="accept-encoding" elementType="Header">
                    <stringProp name="Header.name">accept-encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="accept-language" elementType="Header">
                    <stringProp name="Header.name">accept-language</stringProp>
                    <stringProp name="Header.value">ru,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="cookie" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">_ym_uid=1649341386883989596; _ym_d=1649341386</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev.cdl.alrosa.ru/api/document-manager/document?path=%D0%94%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B%20%D0%BD%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%86%D0%B8%D1%8E%2Fnttest_06092022030616_1%2F" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="path" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">path</stringProp>
                    <stringProp name="Argument.value">${docPath}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">dev.cdl.alrosa.ru</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/document-manager/document</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name=":method" elementType="Header">
                    <stringProp name="Header.name">:method</stringProp>
                    <stringProp name="Header.value">DELETE</stringProp>
                  </elementProp>
                  <elementProp name=":authority" elementType="Header">
                    <stringProp name="Header.name">:authority</stringProp>
                    <stringProp name="Header.value">dev.cdl.alrosa.ru</stringProp>
                  </elementProp>
                  <elementProp name=":scheme" elementType="Header">
                    <stringProp name="Header.name">:scheme</stringProp>
                    <stringProp name="Header.value">https</stringProp>
                  </elementProp>
                  <elementProp name=":path" elementType="Header">
                    <stringProp name="Header.name">:path</stringProp>
                    <stringProp name="Header.value">/api/document-manager/document?path=%D0%94%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B%20%D0%BD%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%86%D0%B8%D1%8E%2Fnttest_06092022030616_1%2F</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJqNTZ1VDhCU0tfNzk4WUtxOGdHUUR3ak5lNXZLYjV1TTFtSjd5ZWIyaU5BIn0.eyJleHAiOjE2NjM2Njk1MjgsImlhdCI6MTY2MjQ1OTkyOCwianRpIjoiOGIzZGI2MTctMWM3Yi00NzI5LTg4ZjEtOTY3MzU1YWM4ZTNkIiwiaXNzIjoiaHR0cHM6Ly9rZXljbG9hay1kZXYuYWxyb3NhLnJ1L2F1dGgvcmVhbG1zL2NkbC1pbnQiLCJhdWQiOiJjYWRhcy1kbCIsInN1YiI6IjA3MmE0MTEyLTE3MWQtNGRjYy1iY2NkLTI2OWVkNjQ3MzBjZCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImNhZGFzLWRsIiwic2Vzc2lvbl9zdGF0ZSI6IjBhZGQzMjUwLTZhNWMtNDljZS1hNjVkLTI4NTEzMDc0MGRhNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJzaWQiOiIwYWRkMzI1MC02YTVjLTQ5Y2UtYTY1ZC0yODUxMzA3NDBkYTUiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInJvbGVzIjpbImRvY3VtZW50LW1hbmFnZXJfcmV2aWV3IiwiZG9jdW1lbnQtbWFuYWdlcl9mb2xkZXItbWFuYWdlbWVudCIsImRvY3VtZW50LW1hbmFnZXJfZG9jdW1lbnQtbWFuYWdlbWVudCIsImRvY3VtZW50LW1hbmFnZXJfcmV2aWV3LW1hbmFnZW1lbnQiLCJkb2N1bWVudC1tYW5hZ2VyX2FjY2VzcyJdLCJuYW1lIjoidGVzdHVzZXIxIiwiZ2l2ZW5fbmFtZSI6ItCd0LDQs9GA0YPQt9C-0YfQvdGL0Lkg0J_QtdGA0LLRi9C5INCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCIsImZhbWlseV9uYW1lIjoi0J3QsNCz0YDRg9C30L7Rh9C90YvQuSJ9.OS9ryUqLmg5uYoMxAU-5bSLUA6x7E1E1lc9-_to0FJ1x_VuRwagfkhc6OYmSrUSalryc4T6W9CmRt5lV7kugxh7VlM8_Kv3DxrSCcyhCo6WE-tKjlICvLxfvxmw_Fs3ko_RRoXf0mghEXrudhARmPQtphdADkogjdYfmsXwcPWOsELuAaNXQoaQf9-JSDs7jNCPUeLIpyr_VJ04vze9fo5VqA7x706bIBgstwazqLTDoPVLK5jPS1Jt7roVsW1dO_1byGx37QEGJSs8gOCnfI3OaIRjus8ITaEjoBKfPFDBUD0c0sH5jAUAp2vUmiH1Jl8KtVAZ-3SG9gKydjCAsHQ</stringProp>
                  </elementProp>
                  <elementProp name="user-agent" elementType="Header">
                    <stringProp name="Header.name">user-agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.86 YaBrowser/21.3.0.673 Yowser/2.5 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="origin" elementType="Header">
                    <stringProp name="Header.name">origin</stringProp>
                    <stringProp name="Header.value">https://dev.cdl.alrosa.ru</stringProp>
                  </elementProp>
                  <elementProp name="sec-fetch-site" elementType="Header">
                    <stringProp name="Header.name">sec-fetch-site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="sec-fetch-mode" elementType="Header">
                    <stringProp name="Header.name">sec-fetch-mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="sec-fetch-dest" elementType="Header">
                    <stringProp name="Header.name">sec-fetch-dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="referer" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://dev.cdl.alrosa.ru/documents/folder/%D0%94%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B%20%D0%BD%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%86%D0%B8%D1%8E%2F</stringProp>
                  </elementProp>
                  <elementProp name="accept-encoding" elementType="Header">
                    <stringProp name="Header.name">accept-encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="accept-language" elementType="Header">
                    <stringProp name="Header.name">accept-language</stringProp>
                    <stringProp name="Header.value">ru,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="cookie" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">_ym_uid=1649341386883989596; _ym_d=1649341386</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">0.0</stringProp>
                <stringProp name="ConstantTimer.delay">0.0</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
